return {
  {
    'chochkov/vim-rspec-focus',
    lazy = false,
    keys = {
      { '<Leader>rf', function() vim.cmd("call rspecfocus#AddFocusToPreviousRspecBlock()") end, desc = "Add rspec focus tag" },
      { '<Leader>ru', function() vim.cmd("call rspecfocus#RemoveAllFocusTags()") end,           desc = "Remove all focus tags in file" }
    }
  }
  -- {
  --   'thoughtbot/vim-rspec',
  --   config = function()
  --     -- vim.g.rspec_command = "!rspec --drb {spec}"
  --     -- Lua function to dynamically find the appropriate container and run RSpec inside it
  --     function FindRspecContainer()
  --       local handle = io.popen(
  --         "docker ps --filter 'name=backend' --filter 'name=web' --format '{{.Names}}' | head -n 1")
  --       local container = handle:read("*a"):gsub("%s+", "") -- Trim any whitespace
  --       handle:close()
  --
  --       if container == "" then
  --         vim.notify("No running container named 'backend' or 'web' found.", vim.log.levels.ERROR)
  --         return "!rspec {spec}"
  --       else
  --         return "!docker exec -i " .. container .. " rspec {spec}"
  --       end
  --     end
  --
  --     -- Set the rspec command dynamically using the Lua function
  --     vim.g.rspec_command = FindRspecContainer()
  --   end,
  --   keys = {
  --     { '<Leader>rr', function() vim.cmd('call RunCurrentSpecFile()') end },
  --     { '<Leader>rs', function() vim.cmd('call RunNearestSpec()') end },
  --     { '<Leader>rl', function() vim.cmd('call RunLastSpec()') end },
  --     { '<Leader>ra', function() vim.cmd('call RunAllSpecs()') end },
  --   }
  --
  -- },
  -- {
  --   "nvim-neotest/neotest",
  --   lazy = true,
  --   dependencies = {
  --     "nvim-neotest/nvim-nio",
  --     "nvim-lua/plenary.nvim",
  --     "antoinemadec/FixCursorHold.nvim",
  --     "olimorris/neotest-rspec",
  --   },
  --   config = function()
  --     require("neotest").setup({
  --       adapters = {
  --         require("neotest-rspec")({
  --           rspec_cmd = function()
  --             return vim.tbl_flatten({
  --               "bundle",
  --               "exec",
  --               "rspec",
  --             })
  --           end
  --         }),
  --       },
  --     })
  --   end,
  -- },
}
-- return {
--   {
--     "nvim-neotest/neotest",
--     dependencies = {
--       "nvim-neotest/nvim-nio",
--       "nvim-lua/plenary.nvim",
--       "antoinemadec/FixCursorHold.nvim",
--       "nvim-treesitter/nvim-treesitter",
--       "nvim-neotest/neotest-python",
--       -- "Shai-tan/neotest-python",
--     },
--     opts = {
--       adapters = {
--         ["neotest-python"] = {
--           -- -- Extra arguments for nvim-dap configuration
--           -- -- See https://github.com/microsoft/debugpy/wiki/Debug-configuration-settings for values
--           -- dap = { justMyCode = false },
--           -- Command line arguments for runner
--           -- Can also be a function to return dynamic values
--           -- args = { "--log-level", "DEBUG" },
--           -- Runner to use. Will use pytest if available by default.
--           -- Can be a function to return dynamic value.
--           runner = "pytest",
--           -- Custom python path for the runner.
--           -- Can be a string or a list of strings.
--           -- Can also be a function to return dynamic value.
--           -- If not provided, the path will be inferred by checking for
--           -- virtual envs in the local directory and for Pipenev/Poetry configs
--           -- python = ".venv/bin/python",
--           -- -- Returns if a given file path is a test file.
--           -- -- NB: This function is called a lot so don't perform any heavy tasks within it.
--           -- is_test_file = function(file_path)
--           --   return true
--           -- end,
--           -- -- !!EXPERIMENTAL!! Enable shelling out to `pytest` to discover test
--           -- -- instances for files containing a parametrize mark (default: false)
--           -- pytest_discover_instances = true,
--           -- -- Allow redirection of pytest execution inside a docker container
--           -- -- Can also be a function to return dynamic value.
--           -- -- !! Only pytest is supported [and](and) requires installation of pytest-json package inside the container
--           -- use_docker = true,
--           -- -- The name of the docker to use for execution.
--           -- -- Can also be a function to return dynamic value.
--           -- containers = "backend",
--         }
--       }
--     },
--   }
-- }
-- require("neotest").setup({
--   adapters = {
--     require("neotest-python")({
--         -- Extra arguments for nvim-dap configuration
--         -- See https://github.com/microsoft/debugpy/wiki/Debug-configuration-settings for values
--         dap = { justMyCode = false },
--         -- Command line arguments for runner
--         -- Can also be a function to return dynamic values
--         args = {"--log-level", "DEBUG"},
--         -- Runner to use. Will use pytest if available by default.
--         -- Can be a function to return dynamic value.
--         runner = "pytest",
--         -- Custom python path for the runner.
--         -- Can be a string or a list of strings.
--         -- Can also be a function to return dynamic value.
--         -- If not provided, the path will be inferred by checking for
--         -- virtual envs in the local directory and for Pipenev/Poetry configs
--         python = ".venv/bin/python",
--         -- Returns if a given file path is a test file.
--         -- NB: This function is called a lot so don't perform any heavy tasks within it.
--         is_test_file = function(file_path)
--           ...
--         end,
--         -- !!EXPERIMENTAL!! Enable shelling out to `pytest` to discover test
--         -- instances for files containing a parametrize mark (default: false)
--         pytest_discover_instances = true,
--     })
--   }
-- })
--
